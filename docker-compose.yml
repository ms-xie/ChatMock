version: "3.9"

services:
  chatmock:
    build: .
    image: chatmock:latest
    container_name: chatmock
    command: ["serve"]
    env_file: .env
    environment:
      - CHATGPT_LOCAL_HOME=/data
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - chatmock_data:/data
      - ./prompt.md:/app/prompt.md:ro
    network_mode: "service:tailscaled"
    depends_on:
      - tailscaled
    healthcheck:
      test:     [
      "CMD-SHELL",
      "python -c \"import urllib.request,os,sys; \
api_key=os.environ.get('OPENAI_API_KEY'); \
req=urllib.request.Request('http://127.0.0.1:8000/health', headers={'Authorization': f'Bearer {api_key}'}); \
sys.exit(0 if urllib.request.urlopen(req).status==200 else 1)\""]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  chatmock-login:
    image: chatmock:latest
    profiles: ["login"]
    command: ["login"]
    environment:
      - CHATGPT_LOCAL_HOME=/data
      - CHATGPT_LOCAL_LOGIN_BIND=0.0.0.0
    volumes:
      - chatmock_data:/data
    ports:
      - "1455:1455"


  # The new tailscaled service, acting as a network sidecar.
  tailscaled:
    image: tailscale/tailscale:latest
    container_name: tailscaled
    hostname: chatmock-server # The hostname that will appear in your Tailscale admin panel.
    env_file: .env # For sourcing the TS_AUTHKEY
    environment:
      - TS_STATE_DIR=/var/lib/tailscale
      # This command sequence starts the daemon, waits for it to be ready,
      # authenticates, and then starts the funnel for port 8000.
    command: ["/bin/sh", "/entrypoint.sh"]
    volumes:
      # Mount our new script into the container.
      - ./docker/entrypoint-tailscale.sh:/entrypoint.sh
      - tailscale_data:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
      - NET_RAW
    restart: unless-stopped

volumes:
  chatmock_data:
  tailscale_data:
